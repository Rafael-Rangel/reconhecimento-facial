//const API_URL = "https://cors-anywhere.herokuapp.com/http://3.12.76.155:8000/api";
const API_URL = "https://projetofotografo.zapto.org/api";
// autoriza√ß√£o 1hr: https://cors-anywhere.herokuapp.com/corsdemo
 
let imageMap = {}; // Mapeamento ID -> Nome da imagem
let isProcessing = false; // Evita chamadas duplicadas no √°lbum
let isLoadingAlbums = false; // Evita m√∫ltiplas chamadas ao carregar √°lbuns

// ‚úÖ Verifica se o √°lbum existe antes de carregar
async function checkAndLoadAlbum(albumId) {
    if (!albumId) {
        console.warn("‚ö†Ô∏è Nenhum albumId fornecido!");
        alert("√Ålbum inv√°lido! Retornando √† p√°gina inicial.");
        window.location.href = "index.html"; 
        return;
    }

    try {
        console.log(`üöÄ Verificando exist√™ncia do √°lbum: ${albumId}...`);

        const response = await fetch(`${API_URL}/albums/${albumId}`);

        if (!response.ok) {
            console.warn(`üö® √Ålbum n√£o encontrado! C√≥digo: ${response.status}`);

            if (response.status === 404) {
                alert("Este √°lbum n√£o existe ou foi exclu√≠do!");
                window.location.href = "index.html"; // Redireciona para a p√°gina principal
                return;
            }

            throw new Error(`Erro ao verificar √°lbum (Status: ${response.status})`);
        }

        console.log("‚úÖ √Ålbum encontrado! Carregando imagens...");
        refreshAlbum(albumId); // Agora podemos carregar as imagens com seguran√ßa

    } catch (error) {
        console.error("üö® Erro ao verificar o √°lbum:", error);
        alert("Erro ao verificar √°lbum. Tente novamente mais tarde.");
        window.location.href = "index.html";
    }
}

// üîÑ Atualiza e carrega imagens corretamente, com VERIFICA√á√ÉO SE O √ÅLBUM EXISTE
let isAlbumDeleted = false; // üî• Flag para evitar loop infinito

async function refreshAlbum(albumId, forceUpdate = false) {
    if (isProcessing && !forceUpdate) {
        console.warn("‚ö†Ô∏è J√° est√° processando! Ignorando nova chamada.");
        return;
    }
    if (isAlbumDeleted) {
        console.warn("üö® O √°lbum foi exclu√≠do. N√£o faremos novas tentativas.");
        return;
    }

    isProcessing = true;

    try {
        console.log("üîÑ Iniciando refreshAlbum para albumId:", albumId);
        if (!albumId) {
            console.warn("‚ö†Ô∏è Nenhum albumId encontrado na URL!");
            return;
        }

        const gallery = document.getElementById("image-gallery");
        if (!gallery) {
            console.warn("‚ö†Ô∏è Elemento #image-gallery n√£o encontrado!");
            return;
        }

        gallery.classList.add("loading");
    

        // üî• Verifica primeiro se o √°lbum existe
        let response = await fetch(`${API_URL}/albums/${albumId}/images`);
        
        if (!response.ok) {
            console.warn("üö® O √°lbum n√£o existe ou foi exclu√≠do! C√≥digo:", response.status);

            if (response.status === 404) {
                isAlbumDeleted = true; // üî• Marca que o √°lbum foi exclu√≠do

                gallery.innerHTML = `<p style="color: red;">Este √°lbum foi exclu√≠do ou n√£o existe.</p>`;
                
                setTimeout(() => {
                    window.location.href = "index.html"; // üîÑ Redireciona para a p√°gina inicial
                }, 3000);

                return;
            }

            throw new Error(`Erro ao carregar √°lbum (Status: ${response.status})`);
        }

        let data = await response.json();

        if (Array.isArray(data.images) && data.images.length > 0) {
            console.log("üì∏ Imagens carregadas com sucesso!");
            displayImages(data.images);
        } else {
            console.warn("‚ö†Ô∏è Nenhuma imagem encontrada.");
            gallery.innerHTML = "<p>Nenhuma imagem dispon√≠vel.</p>";
        }
    } catch (error) {
        console.error("üö® Erro ao atualizar o √°lbum:", error);
    } finally {
        isProcessing = false;
        const gallery = document.getElementById("image-gallery");
        if (gallery) gallery.classList.remove("loading");
        
    }
}


// ‚úÖ Inicia o carregamento ao abrir a p√°gina **COM VERIFICA√á√ÉO SE O √ÅLBUM EXISTE**
document.addEventListener("DOMContentLoaded", () => {
    const albumId = new URLSearchParams(window.location.search).get("album");

    if (!albumId) {
        console.log("üñºÔ∏è Carregando lista de √°lbuns...");
        loadAlbums();
    } else {
        console.log("üöÄ P√°gina carregada dentro de um √°lbum, verificando exist√™ncia...");

        if (!isProcessing) {
            isProcessing = true; // ‚úÖ Define antes de chamar
         
        } else {
            console.warn("‚ö†Ô∏è Ignorando chamada duplicada de refreshAlbum.");
        }
    }
});




// üñºÔ∏è Exibe imagens conforme forem carregando
function displayImages(images) {
    const gallery = document.getElementById("image-gallery");
    if (!gallery) return;

    gallery.innerHTML = ""; // Limpa a galeria antes de carregar as novas imagens
    imageMap = {};

    images.forEach(image => {
        imageMap[image.id] = image.name;

        const img = document.createElement("img");
        img.src = `https://drive.google.com/thumbnail?id=${image.id}`;
        img.alt = image.name;
        img.loading = "lazy";
        img.classList.add("fade-in");
        img.onclick = () => window.open(image.url, "_blank");

        gallery.appendChild(img);
    });

    console.log("‚úÖ Imagens carregadas com sucesso!");
}

// üîÑ Envia selfie e busca rostos similares
async function uploadSelfie(inputId) {
  const fileInput = document.getElementById(inputId);
  if (!fileInput || !fileInput.files.length) {
    alert("Selecione uma imagem para enviar.");
    return;
  }

  const file = fileInput.files[0];
  const albumId = new URLSearchParams(window.location.search).get("album");

  if (!albumId) {
    console.error("‚ö†Ô∏è Nenhum albumId encontrado!");
    return;
  }

  try {
    console.log("üì§ Enviando selfie para compara√ß√£o...");
    const formData = new FormData();
    formData.append("file", file);

    const response = await fetch(`${API_URL}/albums/${albumId}/upload-selfie?max_faces=5&threshold=70`, {
      method: "POST",
      body: formData
    });

    if (!response.ok) {
      console.error("‚ùå Erro ao enviar selfie:", response.status);
      alert("Erro ao enviar selfie. Tente novamente.");
      return;
    }

    const data = await response.json();
    console.log("ü§ñ Resultado da API:", data);

    if (!data.matches || data.matches.length === 0) {
      console.warn("‚ö†Ô∏è Nenhuma imagem similar encontrada.");
      document.getElementById("image-gallery").innerHTML = "<p>Nenhuma correspond√™ncia encontrada.</p>";
      return;
    }

    // Reaproveite a fun√ß√£o de exibir imagens (j√° existente no seu script)
    displayMatchingImages(data.matches);
  } catch (error) {
    console.error("üö® Erro ao enviar selfie:", error);
  }
}


// üîÑ Exibe os rostos mais similares encontrados
function displayMatchingImages(matches) {
    const gallery = document.getElementById("image-gallery");
    if (!gallery) return;

    gallery.innerHTML = "<h3>Imagens Similares Encontradas:</h3>";

    matches.forEach(match => {
        const img = document.createElement("img");
        img.src = `https://drive.google.com/thumbnail?id=${match.image_id}`;
        img.alt = `Similaridade: ${match.similarity.toFixed(2)}%`;
        img.loading = "lazy";
        img.classList.add("fade-in");
        img.onclick = () => window.open(`https://drive.google.com/uc?id=${match.image_id}&export=download`, "_blank");

        const info = document.createElement("p");
        info.innerText = `Similaridade: ${match.similarity.toFixed(2)}%`;

        gallery.appendChild(img);
        gallery.appendChild(info);
    });

    console.log("‚úÖ Imagens similares carregadas!");
}


// üîÑ Exibe os rostos mais similares encontrados
function displayMatchingImages(matches) {
    const gallery = document.getElementById("image-gallery");
    if (!gallery) return;

    gallery.innerHTML = "<h3>Imagens Similares Encontradas:</h3>";

    if (!Array.isArray(matches) || matches.length === 0) {
        console.warn("‚ö†Ô∏è Nenhuma imagem similar encontrada.");
        gallery.innerHTML += "<p>Nenhuma imagem correspondente.</p>";
        return;
    }

    matches.forEach(match => {
        const img = document.createElement("img");
        img.src = `https://drive.google.com/thumbnail?id=${match.image_id}`;
        img.alt = `Similaridade: ${match.similarity}%`;
        img.loading = "lazy";
        img.classList.add("fade-in");
        img.onclick = () => window.open(`https://drive.google.com/uc?id=${match.image_id}&export=download`, "_blank");

        const info = document.createElement("p");
        info.innerText = `Similaridade: ${match.similarity.toFixed(2)}%`;

        gallery.appendChild(img);
        gallery.appendChild(info);
    });

    console.log("‚úÖ Imagens similares carregadas!");
}

// üîÑ Carrega os √°lbuns **APENAS SE N√ÉO ESTIVER SENDO CARREGADO**
async function loadAlbums() {
    if (isLoadingAlbums) {
        console.warn("‚ö†Ô∏è J√° est√° carregando os √°lbuns! Ignorando nova chamada.");
        return;
    }
    isLoadingAlbums = true;

    const albumContainer = document.getElementById("album-container");
    if (!albumContainer) {
        console.warn("‚ö†Ô∏è P√°gina sem #album-container, pulando carregamento de √°lbuns.");
        return;
    }

    try {
        console.log("üìÇ Buscando √°lbuns...");
        const response = await fetch(`${API_URL}/main/folders`);

        if (!response.ok) {
            console.warn(`‚ö†Ô∏è Erro na API: ${response.status}`);
            throw new Error("Erro ao carregar √°lbuns.");
        }

        const data = await response.json();
        console.log("üìÇ √Ålbuns recebidos:", data);

        albumContainer.innerHTML = "";

        if (!Array.isArray(data.folders) || data.folders.length === 0) {
            console.warn("‚ö†Ô∏è Nenhum √°lbum encontrado!");
            albumContainer.innerHTML = "<p>Nenhum √°lbum dispon√≠vel.</p>";
            return;
        }

        data.folders.forEach(album => {
            const albumCard = document.createElement("div");
            albumCard.classList.add("album-card");
            albumCard.innerText = album.name;
            albumCard.onclick = () => window.location.href = `album.html?album=${album.id}`;

            albumContainer.appendChild(albumCard);
        });

        console.log("‚úÖ √Ålbuns exibidos com sucesso!");
    } catch (error) {
        console.error("üö® Erro ao carregar √°lbuns:", error);
        albumContainer.innerHTML = "<p>Erro ao carregar os √°lbuns. Tente novamente mais tarde.</p>";
    } finally {
        isLoadingAlbums = false; // üî• Libera para futuras chamadas apenas quando terminar
    }
}

// ‚úÖ Inicia o carregamento ao abrir a p√°gina **SOMENTE SE FOR NECESS√ÅRIO**
document.addEventListener("DOMContentLoaded", () => {
    const albumId = new URLSearchParams(window.location.search).get("album");

    if (!albumId) {
        console.log("üñºÔ∏è Carregando lista de √°lbuns...");
        loadAlbums(); // üöÄ Agora √© chamado apenas uma vez corretamente
    } else {
        console.log("üöÄ P√°gina carregada dentro de um √°lbum, tentando atualizar...");
        refreshAlbum(albumId, true);
    }

    // Garante que o bot√£o tamb√©m funcione manualmente
    const updateAlbumsBtn = document.getElementById("updateAlbumsBtn");
    if (updateAlbumsBtn) {
        updateAlbumsBtn.addEventListener("click", () => loadAlbums());
    }

    const updateAlbumBtn = document.getElementById("updateAlbumBtn");
    if (updateAlbumBtn) {
        updateAlbumBtn.addEventListener("click", () => refreshAlbum(albumId, true));
    }
});

// üì§ Exp√µe fun√ß√µes globalmente para evitar erro "loadAlbums is not defined"
window.loadAlbums = loadAlbums;
window.refreshAlbum = refreshAlbum;
window.uploadSelfie = uploadSelfie;
